on:
  workflow_call:
    inputs:
      branch:
        default: develop
        required: true
        type: string
      python-version:
        default: "3.9,3.10,3.11,3.12,3.13"
        required: false
        type: string
      deps:
        default: "p"
        required: false
        type: string
      bdist:
        required: false
        type: string
      os:
        default: ubuntu
        required: true
        type: string
      os_version:
        default: latest
        required: false
        type: string

name: Test-1-pip
jobs:
  build_wheel:
    name: Build wheels
    uses: ./.github/workflows/build-wheel.yml
    with:
      branch: ${{ inputs.branch }}
      extra_linux_platforms: false
      os: ${{ inputs.os }}

  matrix:
    name: Generate matrix of samples
    defaults:
      run:
        shell: bash
    runs-on: ${{ inputs.os }}-${{ inputs.os_version }}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - id: samples
        run: python ci/_platform.py --py="${{ inputs.python-version }}" --matrix

    outputs:
      data: ${{ steps.samples.outputs.matrix }}

  tests:
    needs:
      - build_wheel
      - matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.data) }}
    name: ${{ matrix.sample }}-${{ inputs.os }}-${{ inputs.os_version }}-${{ matrix.python-version }}
    runs-on: ${{ inputs.os }}-${{ inputs.os_version }}
    defaults:
      run:
        shell: bash
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            requirements.txt
            ci/build-*

      - name: Download the wheel
        if: ${{ inputs.deps == 'd' }}
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: cx-freeze-whl-${{ inputs.os }}*
          path: wheelhouse

      - name: Freeze and run "${{ matrix.sample }}"
        env:
          TEST_BDIST: ${{ inputs.bdist }}
        id: freeze-and-run
        run: ./ci/build-test-one.sh ${{ matrix.sample }} --debug --venv --deps=${{ inputs.deps }}

      - name: Collect images and logs
        if: ${{ always() }}
        working-directory: samples/${{ matrix.sample }}
        run: |
          mkdir ${{ matrix.sample }}-${{ inputs.os }}
          cp build/exe.*/*.{err,log,png} ${{ matrix.sample }}-${{ inputs.os }} || true
          if [ "${{ inputs.os }}" == "macos" ]; then
            mkdir ${{ matrix.sample }}-${{ inputs.os }}/app-${{ matrix.python-version }}
            cp build/*.app/Contents/MacOS/*.{err,log,png} ${{ matrix.sample }}-${{ inputs.os }}/app-${{ matrix.python-version }} || true
          fi

      - name: Upload the logs (and screenshots)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-pip-${{ matrix.sample }}-${{ inputs.os }}-${{ matrix.python-version }}
          path: ./samples/${{ matrix.sample }}/${{ matrix.sample }}-${{ inputs.os }}/**
          if-no-files-found: ignore
