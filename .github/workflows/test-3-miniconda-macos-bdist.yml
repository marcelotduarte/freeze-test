name: Test-3-miniconda (macOS/bdist_mac)

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  matrix:
    name: Generate matrix of samples
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        uses: actions/checkout@v3
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      -
        id: set-matrix
        run: |
          import json
          with open("ci/build-test.json") as fp:
              data = json.load(fp)
          samples = json.dumps(list(data.keys()))
          print(f"::set-output name=matrix::{samples}")
        shell: python

  tests:
    needs: [matrix]
    strategy:
      fail-fast: false
      matrix:
        sample: ${{ fromJSON(needs.matrix.outputs.matrix) }}
        os: [macos-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        architecture: [x64]
        exclude:
          - os: macos-latest
            sample: pythonnet-demo
          - os: macos-latest
            sample: service
          - os: macos-latest
            sample: service-asyncio
          - os: macos-latest
            sample: pyside6
          - os: macos-latest
            sample: pyside6-simplebrowser
    name: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.architecture }}-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    env:
      KEY_BASE: ${{ matrix.os }}-${{ matrix.architecture }}-${{ matrix.python-version }}
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
    steps:
      -
        name: Checkout cx_Freeze
        uses: actions/checkout@v3
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: freeze-${{ env.KEY_BASE }}
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
          channels: conda-forge
      -
        name: Freeze and run "${{ matrix.sample }}"
        id: freeze-and-run
        env:
          QT_DEBUG_PLUGINS: 1
          QT_MAC_WANTS_LAYER: 1
          TEST_BDIST_MAC: 1
        run: ./ci/build-test-one.sh ${{ matrix.sample }}
      -
        name: Collect images and logs
        working-directory: samples/${{ matrix.sample }}
        run: mv build/*/*.{err,log,png} . || true
      -
        name: Upload the snapshots and logs
        uses: actions/upload-artifact@v3
        with:
          name: screensnapshots
          path: |
            ./samples/${{ matrix.sample }}/*.err
            ./samples/${{ matrix.sample }}/*.log
            ./samples/${{ matrix.sample }}/*.png
          if-no-files-found: ignore
      -
        name: Return sucess or error code
        run: |
          if [ "${{ steps.freeze-and-run.outputs.status }}" == "" ] ; then
            exit -1
          else
            exit ${{ steps.freeze-and-run.outputs.status }}
          fi
        shell: bash
