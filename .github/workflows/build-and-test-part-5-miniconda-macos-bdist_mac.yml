name: 5-Test miniconda (bdist_mac)

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  matrix:
    name: Generate matrix of samples
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: actions/setup-python@v2
      -
        id: set-matrix
        run: |
          import json
          with open("ci/build-test.json") as fp:
              data = json.load(fp)
          #samples = json.dumps(list(data.keys()))
          samples = json.dumps(["icon", "pyqt5"])
          print(f"::set-output name=matrix::{samples}")
        shell: python

  tests:
    needs: [matrix]
    strategy:
      fail-fast: false
      matrix:
        sample: ${{ fromJSON(needs.matrix.outputs.matrix) }}
        os: [macos-latest]
        python-version: [3.8]
        architecture: [x64]
        #exclude:
        #  - os: macos-latest
        #    sample: pythonnet-demo
        #  - os: macos-latest
        #    sample: service
    name: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout cx_Freeze
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
      -
        name: Freeze and run "${{ matrix.sample }}"
        id: freeze-and-run
        env:
          QT_DEBUG_PLUGINS: 1
          PIP_INDEX_URL: https://riverbankcomputing.com/pypi/simple/
          TEST_BDIST_MAC: 1
          #MACOSX_SDK_VERSION: '11.0'
          #MACOSX_DEPLOYMENT_TARGET: '10.9'
        run: |
          echo "::group::conda info"
          conda info
          echo "::endgroup::"
          echo "::group::CONDA_BUILD_SYSROOT"
          #export CONDA_BUILD_SYSROOT=$HOME/MacOSX11.0.sdk
          #export CONDA_BUILD_SYSROOT=
          #export CFLAGS="${CFLAGS} -isysroot ${CONDA_BUILD_SYSROOT} -mmacosx-version-min=${MACOSX_DEPLOYMENT_TARGET} -fno-lto"
          echo "::endgroup::"
          echo "::group::Install c-compiler"
          conda install -c conda-forge c-compiler
          echo "::endgroup::"
          echo "::group::Install libpython-static"
          conda install -c conda-forge libpython-static || true
          echo "::endgroup::"
          echo "::group::Test with conda build"
          #conda install -c conda-forge importlib-metadata wheel
          #conda install conda-build
          #python setup.py bdist_conda
          echo "::endgroup::"
          ./ci/build-test-one.sh ${{ matrix.sample }} || echo "::set-output name=status::$?"
      -
        name: Collect images and logs
        run: |
          cd cx_Freeze/samples/${{ matrix.sample }}
          mv build/*/*.png . || true
          mv build/*/*.log . || true
      -
        name: Upload the snapshots and logs
        uses: actions/upload-artifact@v2
        with:
          name: screensnapshots
          path: |
            ./cx_Freeze/samples/${{ matrix.sample }}/*.png
            ./cx_Freeze/samples/${{ matrix.sample }}/*.log
          if-no-files-found: ignore
      -
        name: Status
        run: exit ${{ steps.freeze-and-run.outputs.status }}
        shell: bash
