name: Build wheel

on:
  release:
    types:
      - created
  workflow_call:
    inputs:
      branch:
        default: main
        required: true
        type: string
      extra_linux_platforms:
        default: true
        required: false
        type: boolean
      extra_macos_platforms:
        default: true
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      branch:
        default: develop
        required: true
        type: choice
        options:
          - develop
          - main
      extra_linux_platforms:
        default: true
        required: false
        type: boolean
      extra_macos_platforms:
        default: true
        required: false
        type: boolean

jobs:
  matrix:
    name: Generate matrix of builds
    runs-on: ubuntu-latest
    steps:

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Extra includes
        id: includes
        run: |
          import json, os
          include = [
              {"os": "ubuntu-latest", "arch": "x86_64"},
              {"os": "windows-latest", "arch": "x86_64"},
              {"os": "macos-13", "arch": "x86_64"},
              {"os": "macos-14", "arch": "arm64"},
          ]
          if "${{ inputs.extra_linux_platforms }}" == "true":
            include += [
              {"os": "ubuntu-latest", "arch": "arm64"},
              {"os": "ubuntu-latest", "arch": "ppc64le"},
            ]
          if "${{ inputs.extra_macos_platforms }}" == "true":
            include += [
              {"os": "macos-14", "arch": "universal2"},
            ]
          with open(os.environ["GITHUB_OUTPUT"], "a+") as f:
            print("data="+json.dumps({"include": include}), file=f)
          print("data="+json.dumps({"include": include}))
        shell: python

    outputs:
      data: ${{ steps.includes.outputs.data }}

  build_wheel:
    needs:
      - matrix
    strategy:
      fail-fast: false
      # macos-14 is arm64 (apple silicon), macos-13 is x86_64
      matrix: ${{ fromJSON(needs.matrix.outputs.data) }}
    name: Build [${{ matrix.os }}-${{ matrix.arch }}]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            requirements.txt
            requirements-dev.txt
          python-version: '3.12'

      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.arch != 'x86_64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}

      - name: Build sdist and wheels ${{ github.event_name }}
        run: |
          uv pip install build
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" == "x86_64" ]; then
              ./ci/build-wheel.sh "cp3*-manylinux_x86_64"
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              ./ci/build-wheel.sh "cp3*-*_aarch64"
            else
              ./ci/build-wheel.sh "cp3*-*_${{ matrix.arch }}"
            fi
          elif [ "${{ matrix.os }}" == "macos-13" ]; then
            ./ci/build-wheel.sh "cp3{9,10}-*"
          elif [ "${{ matrix.os }}" == "macos-14" ]; then
            if [ "${{ matrix.arch }}" == "arm64" ]; then
              ./ci/build-wheel.sh "cp3{11,12,13}-*" --archs="arm64"
            else
              ./ci/build-wheel.sh "cp3{11,12,13}-*"
            fi
          else
            ./ci/build-wheel.sh --all
          fi

      - name: Upload the artifact
        uses: actions/upload-artifact@v4
        with:
          name: cx-freeze-whl-${{ matrix.os }}-${{ matrix.arch }}
          path: wheelhouse
          compression-level: 0  # no compression
