name: Build packages

on:
  workflow_dispatch:

jobs:
  build_wheel_windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        architecture: [x64, x86]
    name: Build [${{ matrix.os }} ${{ matrix.architecture }}][Python ${{ matrix.python-version }}]
    runs-on: ${{ matrix.os }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      -
        name: Variables
        run: |
          declare || true
          python -m sysconfig
        shell: bash
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build setuptools
      -
        name: Build the wheel [Python 3.6-3.9]
        if: runner.os != 'Windows' || matrix.python-version != '3.10'
        run: python -m build -o wheelhouse
      -
        name: Build the wheel [Windows][Python 3.10]
        if: runner.os == 'Windows' && matrix.python-version == '3.10'
        run: |
          pip install --upgrade wheel
          git clone -b 3.0 https://github.com/anthony-tuininga/cx_Logging.git
          python -m build -o wheelhouse -n ./cx_Logging
          pip install -f wheelhouse cx_Logging
          python -m build -o wheelhouse -n .
        shell: bash
      -
        name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse

  build_wheel_macosx:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        architecture: [x64]
    name: Build [${{ matrix.os }} ${{ matrix.architecture }}][Python ${{ matrix.python-version }}]
    runs-on: ${{ matrix.os }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      -
        name: Variables
        run: |
          declare || true
          python -m sysconfig
          xcodebuild -showsdks
        shell: bash
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build setuptools
      -
        name: Build the wheel
        run: |
          python -m build -o wheelhouse
          if [ "${{ matrix.python-version }}" != "3.6" ] ; then
            export MACOSX_DEPLOYMENT_TARGET="10.9"
            export _PYTHON_HOST_PLATFORM="macosx-10.9-x86_64"
            python -m build -o wheelhouse
          fi
      -
        name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse

  build_wheel_unix:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    name: Build [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: actions/setup-python@v2
      -
        name: Variables
        run: |
          declare || true
          python -m sysconfig
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.3.1
      -
        name: Build the wheel
        run: python -m cibuildwheel
      -
        name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse

  build_msys2:
    strategy:
      fail-fast: false
      matrix:
        sys: [ { msystem: MINGW32, env: i686 }, { msystem: MINGW64, env: x86_64 }, { msystem: UCRT64, env: ucrt-x86_64 }]
    name: Build [${{ matrix.sys.msystem }} ${{ matrix.sys.env }}]
    defaults:
      run:
        shell: msys2 {0}
    runs-on: windows-latest
    steps:
      -
        uses: actions/checkout@v2
      -
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys.msystem }}
          install: >-
            dos2unix git
            mingw-w64-${{ matrix.sys.env }}-cc
            mingw-w64-${{ matrix.sys.env }}-tools
            mingw-w64-${{ matrix.sys.env }}-python-setuptools
            mingw-w64-${{ matrix.sys.env }}-python-cx-logging
            mingw-w64-${{ matrix.sys.env }}-python-importlib-metadata
            mingw-w64-${{ matrix.sys.env }}-python-lief
          update: true
      -
        name: Variables
        run: |
          declare || true
          python -m sysconfig
      -
        name: Build the package
        run: |
          dos2unix PKGBUILD
          MINGW_ARCH=${{ matrix.sys.msystem }} makepkg-mingw -sCLf
      -
        name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: mingw-w64-*.pkg.*

  conda_recipe:
    name: Generate recipe
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_freeze-feedstock
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
          path: recipe/cx_Freeze
      -
        name: Prepare recipe
        id: recipe
        working-directory: recipe
        run: |
          pushd cx_Freeze/cx_Freeze
          VERSION=$(grep "__version__ = " __init__.py | sed 's/-/./' | awk -F\" '{print $2}')
          popd
          sed -i "/set version/c\{% set version = \"$VERSION\" %}" meta.yaml
          sed -i '/number:/c\  number: 0' meta.yaml
          sed -i '/url:/c\  git_url: https://github.com/marcelotduarte/cx_Freeze.git' meta.yaml
          sed -i '/sha256:/c\  git_rev: develop' meta.yaml
          echo "::set-output name=meta::$(base64 --wrap=0 meta.yaml)"
          cp meta.yaml meta_path.yaml
          sed -i '/git_url:/c\  path: ./cx_Freeze' meta_path.yaml
          sed -i '/git_rev:/c\  #' meta_path.yaml
          echo "::set-output name=meta_path::$(base64 --wrap=0 meta_path.yaml)"
          git diff
      -
        name: List 'unix' configurations
        id: unix
        run: |
          CONFIGS=""
          for CONFIG in .ci_support/linux_*.yaml; do
            name=${CONFIG:12:-5}
            python_and_version=$(echo $name|awk -F_ '{print $3}')
            version="${python_and_version:8:-1}"
            CONFIGS="${CONFIGS}{\"name\":\"${name}\",\"version\":\"${version}\",\"os\":\"ubuntu\"}, "
          done
          for CONFIG in .ci_support/osx_*.yaml; do
            name=${CONFIG:12:-5}
            python_and_version=$(echo $name|awk -F_ '{print $3}')
            version="${python_and_version:6:-1}"
            CONFIGS="${CONFIGS}{\"name\":\"${name}\",\"version\":\"${version}\",\"os\":\"macos\"}, "
          done
          echo "::set-output name=config::[${CONFIGS::-2}]"
      -
        name: List 'windows' configurations
        id: win
        run: |
          CONFIGS=""
          for CONFIG in .ci_support/win_*.yaml; do
            name=${CONFIG:12:-5}
            python_and_version=$(echo $name|awk -F_ '{print $3}')
            version="${python_and_version:6:-1}"
            CONFIGS="${CONFIGS}{\"name\":\"${name}\",\"version\":\"${version}\",\"os\":\"windows\"}, "
          done
          echo "::set-output name=config::[${CONFIGS::-2}]"
    outputs:
      data: ${{ steps.recipe.outputs.meta }}
      data_path: ${{ steps.recipe.outputs.meta_path }}
      unix: ${{ steps.unix.outputs.config }}
      win: ${{ steps.win.outputs.config }}

  build_conda_unix:
    needs: [conda_recipe]
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.conda_recipe.outputs.unix) }}
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}-latest
    steps:
      -
        uses: actions/setup-python@v2
      -
        uses: actions/checkout@v2
        with:
          repository: marcelotduarte/cx_freeze-feedstock
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
          path: recipe/cx_Freeze
      -
        name: Update recipe
        working-directory: recipe
        run: echo ${{ needs.conda_recipe.outputs.data_path }} | base64 -d>meta.yaml
      -
        run: cat recipe/meta.yaml
      -
        name: Build the conda package
        run: python build-locally.py ${{ matrix.config.name }}
      -
        name: Move to build_artifacts
        if: matrix.config.os == 'macos'
        run: |
          mkdir -p build_artifacts
          mv miniforge3/conda-bld/* build_artifacts/
      -
        run: ls -l build_artifacts
      -
        name: Upload the conda artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-conda
          path: ./build_artifacts/*/cx_freeze*.tar.bz2

  build_conda_windows:
    needs: [conda_recipe]
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.conda_recipe.outputs.win) }}
    name: Build ${{ matrix.config.name }}
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ${{ matrix.config.os }}-latest
    steps:
      -
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: freeze-${{ matrix.config.name }}
          python-version: ${{ matrix.config.version }}
          #architecture: ${{ matrix.architecture }}
          channels: conda-forge
      -
        run: conda info
      -
        run: conda install -c conda-forge conda-build
      -
        uses: actions/checkout@v2
        with:
          repository: marcelotduarte/cx_freeze-feedstock
      -
        name: Update recipe
        working-directory: recipe
        run: echo ${{ needs.conda_recipe.outputs.data }} | base64 -d>meta.yaml
      -
        name: Build the conda package
        run: |
          mkdir -p build_artifacts
          conda build -c conda-forge recipe --output-folder build_artifacts
      -
        run: ls -l build_artifacts
      -
        name: Upload the conda artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-conda
          path: ./build_artifacts/*/cx_freeze*.tar.bz2

  build_conda_index:
    needs: [build_conda_unix, build_conda_windows]
    strategy:
      fail-fast: false
    name: Conda index
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ubuntu-latest
    steps:
      -
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: freeze-index
          python-version: 3.9
          channels: conda-forge
      -
        name: Download the conda artifacts
        uses: actions/download-artifact@v2
        with:
          name: cx-freeze-conda
          path: build_artifacts
      -
        run: ls -l build_artifacts
      -
        run: conda install -c conda-forge conda-build
      -
        run: conda index build_artifacts
      -
        run: ls -l build_artifacts
      -
        name: Upload repository data to the conda artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-conda
          path: |
            ./build_artifacts/*/current_repodata.*
            ./build_artifacts/*/repodata*
            ./build_artifacts/*/index.html
            !./build_artifacts/noarch

  packages:
    needs:
      - build_wheel_windows
      - build_wheel_macosx
      - build_wheel_unix
      - build_msys2
      - build_conda_index
    runs-on: ubuntu-latest
    name: Update packages repository
    steps:
      -
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: marcelotduarte/packages
          token: ${{ secrets.PUSH }}
      -
        uses: actions/setup-python@v2
      -
        name: Download the artifact
        uses: actions/download-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse
      -
        name: Download the conda artifacts
        uses: actions/download-artifact@v2
        with:
          name: cx-freeze-conda
          path: wheelhouse/conda
      -
        name: Create packages template
        working-directory: wheelhouse
        run: |
          cp ../make_index.py .
          # cx_Freeze wheels
          mkdir -p cx-freeze
          mv cx_Freeze-* cx-freeze/
          python make_index.py cx-freeze --base cx_Freeze
          # mingw packages
          mkdir -p python-cx-freeze
          mv mingw-*-python-cx-freeze-* python-cx-freeze/
          python make_index.py python-cx-freeze
          # conda packages
          python make_index.py conda
          # cx_Logging
          mkdir -p cx-logging
          mv cx_Logging-* cx-logging/
          python make_index.py cx-logging --base cx_Logging
          # cleanup
          rm make_index.py
          # template
          VERSION=$(ls cx-freeze | (read name; echo $name) | sed 's/-/ /g' | awk '{print $2}')
          echo -e "# Development packages for cx_Freeze $VERSION\n">index.md
          echo -e "Development wheels for [cx_Freeze](cx-freeze/index.md).\n">>index.md
          echo -e "Development packages for MSYS2 [python-cx-freeze](python-cx-freeze/index.md).\n">>index.md
          #echo -e "{% include_relative python-cx-freeze/index.md %}\n">>index.md
          echo -e "Development packages for conda-forge [cx_freeze](conda/index.md).\n">>index.md
          echo -e "# Packages for cx_Logging 3.0 \[Windows\]\[Python 3.10\]\n">>index.md
          echo -e "Unofficial wheels for [cx_Logging](cx-logging/index.md).\n">>index.md
          echo "theme: jekyll-theme-architect">_config.yml
      -
        name: Publish cx_Freeze packages
        run: |
          git config user.name "Marcelo Duarte"
          git config user.email marcelotduarte@users.noreply.github.com
          git branch -D gh-pages || true
          git push origin :gh-pages || true
          git checkout --orphan gh-pages
          cp -r wheelhouse/* .
          git add cx-freeze python-cx-freeze conda cx-logging index.md _config.yml
          git commit -m "Publish cx_Freeze packages"
          git push --set-upstream origin gh-pages
        shell: bash
