name: Build packages

on:
  schedule:
    # run every day at 7:30AM UTC
    - cron:  '30 7 * * *'
  workflow_dispatch:

jobs:

  build_wheel_windows_cx_logging_31:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    name: Build cx_Logging [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop
          repository: marcelotduarte/cx_Logging

      - uses: actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: "3.11"

      - name: Install cibuildwheel
        run: python -m pip install "cibuildwheel>=2.11.2"
        shell: bash

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        shell: bash

      - name: Upload the artifact
        uses: actions/upload-artifact@v3
        with:
          name: cx-logging-wheelhouse
          path: wheelhouse

  build_wheel:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    name: Build wheel [${{ matrix.os }}]
    env:
      COMMIT_SHA: ${{ github.sha }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze

      - uses: actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: "3.11"

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Install cibuildwheel
        run: python -m pip install "cibuildwheel>=2.11.2"

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Upload the artifact
        uses: actions/upload-artifact@v3
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse

  build_msys2:
    strategy:
      fail-fast: false
      matrix:
        sys: [ { msystem: MINGW32, env: i686 }, { msystem: MINGW64, env: x86_64 }, { msystem: UCRT64, env: ucrt-x86_64 }]
    name: Build [${{ matrix.sys.msystem }} ${{ matrix.sys.env }}]
    defaults:
      run:
        shell: msys2 {0}
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys.msystem }}
          install: >-
            base-devel dos2unix git
            mingw-w64-${{ matrix.sys.env }}-cc
            mingw-w64-${{ matrix.sys.env }}-tools
            mingw-w64-${{ matrix.sys.env }}-python-setuptools
            mingw-w64-${{ matrix.sys.env }}-python-cx-logging
            mingw-w64-${{ matrix.sys.env }}-python-lief
          update: true

      - name: Variables
        run: |
          declare || true
          python -m sysconfig

      - name: Build the package
        run: |
          dos2unix PKGBUILD
          MINGW_ARCH=${{ matrix.sys.msystem }} makepkg-mingw -sCLf

      - name: Upload the artifact
        uses: actions/upload-artifact@v3
        with:
          name: cx-freeze-mingw
          path: mingw-w64-*.pkg.*

  conda_recipe:
    name: Generate recipe
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          repository: marcelotduarte/cx_freeze-feedstock

      - uses: actions/checkout@v3
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
          path: recipe/cx_Freeze

      - name: Prepare recipe
        id: recipe
        working-directory: recipe
        run: |
          pushd cx_Freeze/cx_Freeze
          VERSION=$(grep "__version__ = " __init__.py | sed 's/-/./' | awk -F\" '{print $2}')
          popd
          sed -i "/set version/c\{% set version = \"$VERSION\" %}" meta.yaml
          sed -i '/number:/c\  number: 0' meta.yaml
          sed -i '/url:/c\  git_url: https://github.com/marcelotduarte/cx_Freeze.git' meta.yaml
          sed -i '/sha256:/c\  git_rev: develop' meta.yaml
          sed -i '/- setuptools/c\    - setuptools >=61.2' meta.yaml
          echo "meta=$(base64 --wrap=0 meta.yaml)" >> $GITHUB_OUTPUT
          cp meta.yaml meta_path.yaml
          sed -i '/git_url:/c\  path: ./cx_Freeze' meta_path.yaml
          sed -i '/git_rev:/c\  #' meta_path.yaml
          echo "meta_path=$(base64 --wrap=0 meta_path.yaml)" >> $GITHUB_OUTPUT
          git diff

      - name: List 'unix' configurations
        id: unix
        run: |
          CONFIGS=""
          for CONFIG in .ci_support/linux_*.yaml; do
            name=${CONFIG:12:-5}
            python_and_version=$(echo $name|awk -F_ '{print $3}')
            version="${python_and_version:8:-1}"
            CONFIGS="${CONFIGS}{\"name\":\"${name}\",\"version\":\"${version}\",\"os\":\"ubuntu\"}, "
          done
          for CONFIG in .ci_support/osx_*.yaml; do
            name=${CONFIG:12:-5}
            python_and_version=$(echo $name|awk -F_ '{print $3}')
            version="${python_and_version:6:-1}"
            CONFIGS="${CONFIGS}{\"name\":\"${name}\",\"version\":\"${version}\",\"os\":\"macos\"}, "
          done
          echo "config=[${CONFIGS::-2}]" >> $GITHUB_OUTPUT

      - name: List 'windows' configurations
        id: win
        run: |
          CONFIGS=""
          for CONFIG in .ci_support/win_*.yaml; do
            name=${CONFIG:12:-5}
            python_and_version=$(echo $name|awk -F_ '{print $3}')
            version="${python_and_version:6:-1}"
            #if [ "$version" == "3.11" ]; then
            #  continue
            #fi
            CONFIGS="${CONFIGS}{\"name\":\"${name}\",\"version\":\"${version}\",\"os\":\"windows\"}, "
          done
          echo "config=[${CONFIGS::-2}]" >> $GITHUB_OUTPUT
    outputs:
      data: ${{ steps.recipe.outputs.meta }}
      data_path: ${{ steps.recipe.outputs.meta_path }}
      unix: ${{ steps.unix.outputs.config }}
      win: ${{ steps.win.outputs.config }}

  build_conda_unix:
    needs: [conda_recipe]
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.conda_recipe.outputs.unix) }}
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}-latest

    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - uses: actions/checkout@v3
        with:
          repository: marcelotduarte/cx_freeze-feedstock

      - uses: actions/checkout@v3
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
          path: recipe/cx_Freeze

      - name: Update recipe
        working-directory: recipe
        run: echo ${{ needs.conda_recipe.outputs.data_path }} | base64 -d>meta.yaml

      - run: cat recipe/meta.yaml

      - name: Build the conda package
        run: python build-locally.py ${{ matrix.config.name }}

      - name: Move to build_artifacts
        if: matrix.config.os == 'macos'
        run: |
          mkdir -p build_artifacts
          mv miniforge3/conda-bld/* build_artifacts/

      - run: ls -l build_artifacts

      - name: Upload the conda artifact
        uses: actions/upload-artifact@v3
        with:
          name: cx-freeze-conda
          path: ./build_artifacts/*/cx_freeze*.tar.bz2

  build_conda_windows:
    needs: [conda_recipe]
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.conda_recipe.outputs.win) }}
    name: Build ${{ matrix.config.name }}
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ${{ matrix.config.os }}-latest

    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: freeze-${{ matrix.config.name }}
          python-version: ${{ matrix.config.version }}
          channels: conda-forge

      - run: conda info

      - run: conda install -c conda-forge conda-build

      - uses: actions/checkout@v3
        with:
          repository: marcelotduarte/cx_freeze-feedstock

      - name: Update recipe
        working-directory: recipe
        run: echo ${{ needs.conda_recipe.outputs.data }} | base64 -d>meta.yaml

      - run: cat recipe/meta.yaml

      - name: Build the conda package
        run: |
          mkdir -p build_artifacts
          conda build -c conda-forge recipe --output-folder build_artifacts

      - run: ls -l build_artifacts

      - name: Upload the conda artifact
        uses: actions/upload-artifact@v3
        with:
          name: cx-freeze-conda
          path: ./build_artifacts/*/cx_freeze*.tar.bz2

  build_conda_index:
    needs: [build_conda_unix, build_conda_windows]
    strategy:
      fail-fast: false
    name: Conda index
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ubuntu-latest

    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: freeze-index
          python-version: "3.11"
          channels: conda-forge

      - name: Download the conda artifacts
        uses: actions/download-artifact@v3
        with:
          name: cx-freeze-conda
          path: artifacts

      - run: ls -l artifacts

      - run: conda install -c conda-forge conda-build

      - run: |
          conda index -s linux-64 -s osx-64 -s osx-arm64 -s win-64 artifacts

      - run: ls -l artifacts

      - name: Upload repository data to the conda artifact
        uses: actions/upload-artifact@v3
        with:
          name: cx-freeze-conda
          path: ./artifacts/*/*

  packages:
    needs:
      - build_conda_index
      - build_msys2
      - build_wheel
      - build_wheel_windows_cx_logging_31
    runs-on: ubuntu-latest
    name: Update packages repository

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: marcelotduarte/packages
          token: ${{ secrets.PUSH }}

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Recreate branch gh-pages
        run: |
          git config user.name "Marcelo Duarte"
          git config user.email marcelotduarte@users.noreply.github.com
          git branch -D gh-pages || true
          git push origin :gh-pages || true
          git checkout --orphan gh-pages

      - name: Download the cx_Logging wheels
        uses: actions/download-artifact@v3
        with:
          name: cx-logging-wheelhouse
          path: cx-logging

      - name: Download the cx_Freeze wheels
        uses: actions/download-artifact@v3
        with:
          name: cx-freeze-wheelhouse
          path: cx-freeze

      - name: Download the mingw artifact
        uses: actions/download-artifact@v3
        with:
          name: cx-freeze-mingw
          path: mingw

      - name: Download the conda artifacts
        uses: actions/download-artifact@v3
        with:
          name: cx-freeze-conda
          path: conda

      - name: Create packages template
        run: |
          # cx_Logging wheels
          python make_index.py cx-logging --base cx_Logging
          # cx_Freeze wheels
          python make_index.py cx-freeze --base cx_Freeze
          # mingw packages
          python make_index.py mingw --base python-cx-freeze
          # conda packages
          python make_index.py conda --mask "cx_freeze-*.tar.bz2"
          # cleanup
          rm make_index.py
          # template
          VERSION=$(ls cx-freeze | (read name; echo $name) | sed 's/-/ /g' | awk '{print $2}')
          echo -e "# Development packages for cx_Freeze $VERSION\n">index.md
          echo -e "Development wheels for [cx_Freeze](cx-freeze/index.md).\n">>index.md
          echo -e "Development packages for MSYS2 [python-cx-freeze](mingw/index.md).\n">>index.md
          #echo -e "{% include_relative python-cx-freeze/index.md %}\n">>index.md
          echo -e "Development packages for conda-forge [cx_freeze](conda/index.md).\n">>index.md
          echo -e "# Packages for cx_Logging 3.1 \[Windows\]\[Python 3.7-3.11\]\n">>index.md
          echo -e "Unofficial wheels for [cx_Logging](cx-logging/index.md).\n">>index.md
          echo "theme: jekyll-theme-architect">_config.yml

      - name: Publish cx_Freeze packages
        run: |
          git add .
          git commit -m "Publish cx_Freeze packages"
          git push --set-upstream origin gh-pages
