name: CI

on:
  workflow_dispatch:
    inputs:
      branch:
        default: develop
        required: true
        type: choice
        options:
          - develop
          - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre_commit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python
        uses: marcelotduarte/setup-python-uv-action@new
        with:
          cache: 'packages'
          python-version: '3.12'

      - name: Install dependencies
        run: uv pip install -e.[dev,doc]

      - name: Run pre-commit
        run: >-
          pre-commit run --show-diff-on-failure --color=always
          --all-files --hook-stage=manual

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        include:
          - os: macos-14  # macos-14 is apple silicon
            python-version: '3.11'
          - os: macos-14
            python-version: '3.12'
          - os: macos-14
            python-version: '3.13'
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: marcelotduarte/setup-python-uv-action@new
        with:
          cache: 'packages'
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y alien fakeroot rpm

      - name: Build wheel for Python ${{ matrix.python-version }} [Windows]
        if: runner.os == 'Windows'
        run: |
          if [ "${{ matrix.python-version }}" == "3.13" ]; then
            export UV_EXTRA_INDEX_URL=https://marcelotduarte.github.io/packages/
          fi
          uv pip install build setuptools cx_Logging
          python -m build -n -x -w -o wheelhouse

      - name: Build wheel for Python ${{ matrix.python-version }} [Linux/macOS]
        if: runner.os != 'Windows'
        env:
          CIBW_BUILD_FRONTEND: build[uv]
        run: |
          PYTHON_TAG=cp$(echo ${{ matrix.python-version }}|sed 's/\.//')
          ARCH=$(python -c "import platform; print(platform.machine().lower())")
          if [ "${{ runner.os }}" == "Linux" ]; then
            PLATFORM_TAG=manylinux_$ARCH
          elif [ "${{ runner.os }}" == "Windows" ]; then
            PLATFORM_TAG=win_$ARCH
          else
            PLATFORM_TAG=macosx_$ARCH
          fi
          uv pip install "`grep cibuildwheel requirements-dev.txt`"
          cibuildwheel --only ${PYTHON_TAG}-${PLATFORM_TAG} --prerelease-pythons

      - name: Upload the wheel
        uses: actions/upload-artifact@v4
        with:
          name: cx-freeze-pip-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheelhouse
          retention-days: 2
          compression-level: 0  # wheel is a zip file

      - name: Install cx_Freeze and dependencies
        run: |
          uv pip install -r requirements.txt -r requirements-test.txt
          uv pip install cx_Freeze --no-index --no-deps -f wheelhouse -v

      - name: Generate coverage report
        run: pytest -nauto --cov="cx_Freeze" --cov-report=xml

  tests_extra:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.10']
        extra-requirement:
          - lief==0.14.1
          - lief==0.13.2
          - lief-disabled
          - pywin32
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: marcelotduarte/setup-python-uv-action@new
        with:
          cache: 'packages'
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv pip install -e.[test]

      - name: Generate coverage report
        run: |
          if [ "${{ matrix.extra-requirement }}" == "lief-disabled" ]; then
            export CX_FREEZE_BIND=imagehlp
          else
            uv pip install "${{ matrix.extra-requirement }}"
          fi
          pytest -nauto --cov="cx_Freeze" --cov-report=xml

  tests_unix_binary_wheel:
    needs:
      - tests  # reuse the wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.12']
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: marcelotduarte/setup-python-uv-action@new
        with:
          cache: 'packages'
          python-version: ${{ matrix.python-version }}

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: cx-freeze-pip-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheelhouse

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt -r requirements-test.txt
          uv pip install cx_Freeze --no-index --no-deps -f wheelhouse -v

      - name: Install dependencies - extra
        run: |
          if [ "${{ matrix.python-version }}" == "3.10" ]; then
            uv pip install -i https://pypi.anaconda.org/intel/simple numpy -v
          fi
          uv pip install pandas -v

      - name: Pip list
        run: uv pip list -v

      - name: Generate coverage report
        run: pytest -nauto --cov="cx_Freeze" --cov-report=xml

  build_msys2:
    name: Build msys2
    uses: ./.github/workflows/build-packages-msys2.yml
    with:
      branch: ${{ inputs.branch }}

  tests_msys2:
    needs:
      - build_msys2
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:

      - name: Download msys2 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cx-freeze-msys2-*
          merge-multiple: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
