name: CI

on:
  workflow_dispatch:
    inputs:
      branch:
        default: develop
        required: true
        type: choice
        options:
          - develop
          - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_wheel:
    name: Build wheels
    uses: ./.github/workflows/build-wheel.yml
    with:
      branch: ${{ inputs.branch }}
      extra_linux_platforms: true
      extra_macos_platforms: false

  tests:
    needs:
      - build_wheel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        include:
          - os: macos-13  # macos-13 is x86_64
            python-version: '3.9'
          - os: macos-13
            python-version: '3.10'
        exclude:
          - os: macos-14  # macos-14 is arm64 (apple silicon)
            python-version: '3.9'
          - os: macos-14
            python-version: '3.10'
          - os: macos-14  # disabled for 7.3.0
            python-version: '3.13'
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Sysconfig
        run: python -m sysconfig

      - uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements.txt
            **/requirements-test.txt

      - name: Download the wheel
        uses: actions/download-artifact@v4
        with:
          name: cx-freeze-whl-${{ matrix.os }}
          path: wheelhouse

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -qy --allow-downgrades alien cpio=2.13+dfsg-7 fakeroot rpm

      - name: Install dependencies to test
        run: |
          uv pip install --system -r requirements.txt -r requirements-test.txt
          uv pip install --system cx_Freeze --no-index --no-deps -f wheelhouse --reinstall

      - name: Generate coverage report
        run: pytest -nauto --cov="cx_Freeze" --cov-report=xml

  tests_extra:
    needs:
      - build_wheel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.10']
        extra-requirement:
          - lief==0.14.1
          - lief==0.13.2
          - lief-disabled
          - pywin32
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements.txt
            **/requirements-test.txt

      - name: Download the wheel
        uses: actions/download-artifact@v4
        with:
          name: cx-freeze-whl-${{ matrix.os }}
          path: wheelhouse

      - name: Install dependencies to test
        run: |
          uv pip install --system -r requirements.txt -r requirements-test.txt
          uv pip install --system cx_Freeze --no-index --no-deps -f wheelhouse --reinstall

      - name: Generate coverage report
        run: |
          if [ "${{ matrix.extra-requirement }}" == "lief-disabled" ]; then
            export CX_FREEZE_BIND=imagehlp
          else
            uv pip install --system "${{ matrix.extra-requirement }}"
          fi
          pytest -nauto --cov="cx_Freeze" --cov-report=xml

  tests_unix_binary_wheel:
    needs:
      - build_wheel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.12']
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements.txt
            **/requirements-test.txt

      - name: Download the wheel
        uses: actions/download-artifact@v4
        with:
          name: cx-freeze-whl-${{ matrix.os }}
          path: wheelhouse

      - name: Install dependencies to test
        run: |
          uv pip install --system -r requirements.txt -r requirements-test.txt
          uv pip install --system cx_Freeze --no-index --no-deps -f wheelhouse --reinstall

      - name: Install dependencies - extra
        run: |
          if [ "${{ matrix.python-version }}" == "3.10" ]; then
            uv pip install --system -i https://pypi.anaconda.org/intel/simple numpy -v
          fi
          uv pip install --system pandas -v

      - name: Pip list
        run: uv pip list --system

      - name: Generate coverage report
        run: pytest -nauto --cov="cx_Freeze" --cov-report=xml

  tests_aarch64:
    needs:
      - build_wheel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Download the wheel
        uses: actions/download-artifact@v4
        with:
          name: cx-freeze-whl-${{ matrix.os }}
          path: wheelhouse

      - uses: uraimo/run-on-arch-action@v2
        name: Test aarch64
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/cx_Freeze"
          shell: /bin/bash
          install: |
            apt-get update -qy
            apt-get install -qy alien fakeroot rpm python3-pip python3-venv
          run: |
            cd /cx_Freeze
            echo "> sysconfig"
            python3 -m sysconfig
            echo "> venv"
            python3 -m venv .venv
            source .venv/bin/activate
            echo "> install"
            pip install -r requirements.txt -r requirements-test.txt
            pip install cx_Freeze --no-index --no-deps -f wheelhouse
            echo "> coverage"
            pytest -nauto --cov="cx_Freeze" --cov-report=xml || true
            echo "> ldd test"
            ldd $(python -c "import cx_Freeze.bases as b; print(b.__path__[0])")/console*-gnu

  build_msys2:
    name: Build msys2
    uses: ./.github/workflows/build-packages-msys2.yml
    with:
      branch: ${{ inputs.branch }}

  tests_msys2:
    needs:
      - build_msys2
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:

      - name: Download msys2 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cx-freeze-msys2-*
          merge-multiple: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
