name: CI

on:
  workflow_dispatch:
    inputs:
      branch:
        default: develop
        required: true
        type: choice
        options:
          - develop
          - main

jobs:
  pre_commit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade uv --disable-pip-version-check
          uv venv
          uv pip install -v -e .[dev,doc]

      - name: Run pre-commit
        run: >-
          .venv/bin/pre-commit run --show-diff-on-failure --color=always
          --all-files --hook-stage=manual

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-13 ]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - os: macos-14
            python-version: '3.11'
          - os: macos-14
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y alien fakeroot rpm

      - name: Install dependencies
        run: |
          python -m pip install --upgrade uv --disable-pip-version-check
          uv venv
          uv pip install -r requirements.txt --pre
          uv pip install -r requirements-test.txt
          uv pip install -v -e . --no-build-isolation --no-deps

      - name: Generate coverage report
        run: |
          .venv/bin/pytest -nauto --cov="cx_Freeze" --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  tests_extra:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]
        python-version: ['3.10']
        extra-requirement:
          - lief==0.13.2
          - lief-disabled
          - pywin32
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade uv --disable-pip-version-check
          uv venv
          uv pip install -r requirements.txt --pre
          uv pip install -r requirements-test.txt
          uv pip install -v -e . --no-build-isolation --no-deps

      - name: Generate coverage report
        run: |
          if [ "${{ matrix.extra-requirement }}" == "lief-disabled" ]; then
            export CX_FREEZE_BIND=imagehlp
          else
            uv pip install "${{ matrix.extra-requirement }}"
          fi
          .venv/bin/pytest -nauto --cov="cx_Freeze" --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  tests_unix_binary_wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: ['3.12']
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          repository: marcelotduarte/cx_Freeze

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies - build wheel
        run: |
          python -m pip install --upgrade uv --disable-pip-version-check
          uv venv
          uv pip install "`grep cibuildwheel requirements-dev.txt`"

      - name: Build wheel for Python ${{ matrix.python-version }}
        run: |
          PYTHON_TAG=cp$(echo ${{ matrix.python-version }}|sed 's/\.//')
          ARCH=$(python -c "import platform; print(platform.machine().lower())")
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            PLATFORM_TAG=manylinux_$ARCH
          else
            PLATFORM_TAG=macosx_$ARCH
          fi
          .venv/bin/cibuildwheel --only ${PYTHON_TAG}-${PLATFORM_TAG}

      - name: Upload the artifact
        uses: actions/upload-artifact@v4
        with:
          name: cx-freeze-pip-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheelhouse

      - name: Install dependencies - tests
        run: |
          uv pip install -r requirements.txt --pre
          uv pip install -r requirements-test.txt
          uv pip install cx_Freeze --no-index --no-deps -f wheelhouse
          # enable extra test - pandas
          uv pip install pandas

      - run: uv pip list -v

      - name: Generate coverage report
        run: |
          .venv/bin/pytest -nauto --cov="cx_Freeze" --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  build_msys2:
    name: Build msys2
    uses: ./.github/workflows/build-packages-msys2.yml
    with:
      branch: ${{ inputs.branch }}

  tests_msys2:
    needs:
      - build_msys2
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:

      - name: Download msys2 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cx-freeze-msys2-*
          merge-multiple: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
