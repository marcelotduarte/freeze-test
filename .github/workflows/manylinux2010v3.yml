name: Create manylinux2010 v3

on:
  release:
    types: [created]
  schedule:
    # run every day at 7:30AM UTC to refresh the cache
    # the cache results in time reduction from 1h20m19s to 1m34s
    - cron:  '30 7 * * *'
  workflow_dispatch:

jobs:

  build:
    strategy:
      matrix:
        platform: [x86_64]
        policy: [manylinux2010]
    name: Build manylinux docker image
    runs-on: ubuntu-latest
    env:
      POLICY: ${{ matrix.policy }}
      PLATFORM: ${{ matrix.platform }}
      COMMIT_SHA: ${{ github.sha }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: master
          repository: pypa/manylinux
      -
        name: Patch the build scripts
        env:
          SCRIPT: docker/build_scripts/build-cpython.sh
        run: |
          sed -i 's/RUN manylinux-entrypoint \/build_scripts\/build-cpython.sh 3.5.10/#/g' docker/Dockerfile
          sed -i 's/COPY --from=build_cpython35 \/opt\/_internal \/opt\/_internal\//#/g' docker/Dockerfile
          sed -i 's/--disable-shared --with-ensurepip=no/--enable-shared --enable-optimizations --with-ensurepip=no LDFLAGS=\"-Wl,-rpath ${PREFIX}\/lib\"/g' $SCRIPT
          sed -i 's/xargs -0 rm -f/xargs -0 ls -l/g' $SCRIPT
          mkdir -p /tmp/docker
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Create cache key
        id: cachekey
        run: echo "::set-output name=hashfile::${{ hashFiles('docker/build_scripts/build-cpython.sh') }}"
      -
        name: Setup cache
        uses: actions/cache@v2
        with:
          path: .buildx-cache-${{ matrix.policy }}_${{ matrix.platform }}/*
          key: buildx-cache-${{ matrix.policy }}-${{ matrix.platform }}-${{ steps.cachekey.outputs.hashfile }}
          restore-keys: buildx-cache-${{ matrix.policy }}-${{ matrix.platform }}-
      -
        name: Build docker image
        run: ./build.sh
      -
        name: Save the image on the cache
        env:
          IMAGENAME: quay.io/pypa/${{ matrix.policy }}_${{ matrix.platform }}
          FILENAME: /tmp/docker/${{ matrix.policy }}_${{ matrix.platform }}.tar
        run: |
          docker save -o $FILENAME $IMAGENAME:$COMMIT_SHA
          mkdir -p /tmp/docker-key
          echo -n ${{ steps.cachekey.outputs.hashfile }} > /tmp/docker-key/${{ matrix.platform }}
      -
        name: Cache docker image
        uses: actions/cache@v2
        with:
          key: ${{ matrix.platform }}-${{ steps.cachekey.outputs.hashfile }}
          path: /tmp/docker
      -
        name: Display structure of docker files
        run: |
          ls -l /tmp/docker
          docker images
      -
        name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-key
          path: /tmp/docker-key/${{ matrix.platform }}
           
  linux:
    needs: build
    strategy:
      matrix:
        platform: [x86_64]
        policy: [manylinux2010]
    name: Build wheel using ${{ matrix.policy }}_${{ matrix.platform }}
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
          submodules: true
      -
        name: Setup Python
        uses: actions/setup-python@v2
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==1.8.0
      -
        name: Download the artifact with the cache key
        uses: actions/download-artifact@v2
        with:
          name: docker-key
          path: /tmp/docker-key/
      -
        name: Get the cache key
        id: cache-docker
        run: |
          echo ::set-output name=key::$(cat /tmp/docker-key/${{ matrix.platform }})
      -
        name: Show the cache key
        run: |
          echo ${{ matrix.platform }}-$(cat /tmp/docker-key/${{ matrix.platform }})
          cat /tmp/docker-key/${{ matrix.platform }}
          echo ${{ steps.cache-docker.outputs.key }}
      -
        name: Get the docker image from cache
        uses: actions/cache@v2
        with:
          key: ${{ matrix.platform }}-${{ steps.cache-docker.outputs.key }}
          path: /tmp/docker
      -
        name: Display structure of docker files
        run: |
          ls -l /tmp/docker
          docker images
      -
        name: Load the docker image
        env:
          PLATFORM: ${{ matrix.platform }}
          FILENAME: /tmp/docker/${{ matrix.policy }}_${{ matrix.platform }}.tar
        run: |
          docker load -i $FILENAME
          docker images
      -
        name: Build the wheel
        env:
          CIBW_BUILD: cp3*-m*_x86_64
          CIBW_SKIP: cp35*
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD: pip install -U importlib-metadata && python -m sysconfig
          CIBW_DEPENDENCY_VERSIONS: latest
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/${{ matrix.policy }}_${{ matrix.platform }}:${{ github.sha }}
        run: python -m cibuildwheel --output-dir wheelhouse .
      -
        name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx_Freeze-wheels
          path: wheelhouse

  test:
    needs: linux
    strategy:
      matrix:
        platform: [x86_64]
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: [x64]
    name: Test the wheel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cx_Freeze
        uses: actions/checkout@v2
        with:
          path: cx_Freeze
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        name: Set up Python ${{ matrix.python-version }} ${{ matrix.architecture }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      -
        name: Download the wheelhouse
        uses: actions/download-artifact@v2
        with:
          name: cx_Freeze-wheels
          path: wheelhouse
      -
        name: Install cx_Freeze from wheel
        run: |
          python -m pip install --upgrade pip
          pip install -U importlib-metadata setuptools wheel
          pip install --no-index -f wheelhouse cx_Freeze

      # environment
      -
        name: Define a variable
        shell: python
        run: |
          import distutils.util
          import os.path
          import sys
          platform = distutils.util.get_platform()
          version = sys.version[0:3]
          with open("BUILD_DIR", "w") as fp:
              fp.write(f"build/exe.{platform}-{version}")
      # samples
      -
        name: Freeze cryptography sample
        working-directory: cx_Freeze/cx_Freeze/samples/cryptography
        run: |
          pip install cryptography
          python setup.py build_exe
      -
        name: Run cryptography sample
        run: |
          ./cx_Freeze/cx_Freeze/samples/cryptography/$(cat BUILD_DIR)/test_crypt
        shell: bash
      -
        name: Upload the frozen app
        uses: actions/upload-artifact@v2
        with:
          name: frozenapp
          path: ./cx_Freeze/cx_Freeze/samples/cryptography/build/exe.*/**

  test2:
    needs: test
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        platform: [x86_64]
    name: Test the wheel part 2
    runs-on: ubuntu-latest
    steps:
      -
        name: Download the frozen app
        uses: actions/download-artifact@v2
        with:
          name: frozenapp
          path: .
      -
        name: Run frozen app
        run: |
          ls -l */
          chmod +x ./exe.linux-${{ matrix.platform }}-${{ matrix.python-version }}/test_crypt
          ./exe.linux-${{ matrix.platform }}-${{ matrix.python-version }}/test_crypt
        shell: bash
