name: 5-Test using miniconda (windows)

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  matrix:
    name: Generate matrix of samples
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: actions/setup-python@v2
      -
        id: set-matrix
        run: |
          import json
          with open("ci/build-test.json") as fp:
              data = json.load(fp)
          samples = json.dumps(list(data.keys()))
          print(f"::set-output name=matrix::{samples}")
        shell: python

  tests:
    needs: [matrix]
    strategy:
      fail-fast: false
      matrix:
        sample: ${{ fromJSON(needs.matrix.outputs.matrix) }}
        os: [windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: [x64]
    name: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout cx_Freeze
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: freeze
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
      -
        name: Install dependencies
        run: |
          conda install -c conda-forge importlib-metadata
          pip install "cx_Logging>=3.0" --no-cache-dir
      -
        name: Build the package
        run: |
          echo "::group::Conda info"
          conda info
          echo "::endgroup::"
          echo "::group::Install build dependencies"
          conda install -c conda-forge importlib-metadata
          pip install "cx_Logging>=3.0" --no-cache-dir
          echo "::endgroup::"
          echo "::group::Conda list"
          conda list
          echo "::endgroup::"
          echo "::group::Build and install cx_Freeze"
          pip install . --no-deps --ignore-installed --no-cache-dir -vvv
          echo "::endgroup::"
      -
        name: Freeze and run "${{ matrix.sample }}"
        id: freeze-and-run
        run: ./ci/build-test-one.sh ${{ matrix.sample }} || echo "::set-output name=status::$?"
      -
        name: Collect images and logs
        run: |
          cd cx_Freeze/samples/${{ matrix.sample }}
          mv build/*/*.png . || true
          mv build/*/*.log . || true
      -
        name: Upload the snapshots and logs
        uses: actions/upload-artifact@v2
        with:
          name: screensnapshots
          path: |
            ./cx_Freeze/samples/${{ matrix.sample }}/*.png
            ./cx_Freeze/samples/${{ matrix.sample }}/*.log
          if-no-files-found: ignore
      -
        name: Status
        run: exit ${{ steps.freeze-and-run.outputs.status }}
