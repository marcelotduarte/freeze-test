name: Build and test

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        branch: [develop]
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: [x64, x86]
        exclude:
          - os: ubuntu-latest
            architecture: x86
          - os: macos-latest
            architecture: x86
    name: Build wheel ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U importlib-metadata setuptools wheel
      - name: Build the wheel
        run: |
          pip wheel . --no-deps -v --wheel-dir wheelhouse
      - name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse

  tests:
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        branch: [develop]
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: [x64, x86]
        exclude:
          - os: ubuntu-latest
            architecture: x86
          - os: macos-latest
            architecture: x86
        sample: [cryptography, icon, matplolib, pandas, pillow, pyside2, service, simple]
    name: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    steps:
      -
        name: Checkout cx_Freeze
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      -
        name: Download the wheelhouse
        uses: actions/download-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse
      -
        name: Install cx-freeze from wheelhouse
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade importlib-metadata setuptools wheel
          pip install --no-index -f wheelhouse cx-freeze
      -
        name: Define a variable
        run: |
          import distutils.util
          import os.path
          import sys
          platform = distutils.util.get_platform()
          version = sys.version[0:3]
          with open("BUILD_DIR", "w") as fp:
              fp.write(f"build/exe.{platform}-{version}")
        shell: python
      -
        name: Install dependencies for ${{ matrix.sample }} sample
        run: |
          if [ '${{ matrix.sample }}' == 'cryptography' ] ; then
            pip install cryptography
          fi
          if [ '${{ matrix.sample }}' == 'matplotlib' ] ; then
            pip install matplotlib numpy Pillow
            if [ '${{ matrix.os }}' == 'ubuntu-latest' ] ; then
              pip install -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04 wxPython
            else
              pip install wxPython
            fi
          fi
          if [ '${{ matrix.sample }}' == 'pandas' ] ; then
            pip install pandas
          fi
          if [ '${{ matrix.sample }}' == 'pillow' ] ; then
            pip install pillow
          fi
          if [ '${{ matrix.sample }}' == 'pyside2' ] ; then
            pip install pyside2
          fi
          if [ '${{ matrix.sample }}' == 'service' ] ; then
            if [ '${{ matrix.os }}' == 'windows-latest' ] ; then
              pip install cx_Logging
            else
              echo "Ignore this sample"
            fi
          fi
        shell: bash
      -
        name: Freeze ${{ matrix.sample }} sample
        working-directory: cx_Freeze/samples/${{ matrix.sample }}
        run: python setup.py build_exe --silent --excludes=tkinter
      -
        name: Run ${{ matrix.sample }} sample
        run: |
          cd ./cx_Freeze/samples/${{ matrix.sample }}/$(cat BUILD_DIR)
          if [ '${{ matrix.sample }}' == 'cryptography' ] ; then
            ./test_crypt
          fi
          if [ '${{ matrix.sample }}' == 'icon' ] ; then
            ./test_icon
            ./test_icon-invalid ação ótica côncavo peña
          fi
          if [ '${{ matrix.sample }}' == 'matplotlib' ] ; then
            ./matplotlib_afm
            #./matplotlib_eg
          fi
          if [ '${{ matrix.sample }}' == 'pandas' ] ; then
            ./test_pandas
          fi
          if [ '${{ matrix.sample }}' == 'pillow' ] ; then
            ./test_pillow
          fi
          if [ '${{ matrix.sample }}' == 'pyside2' ] ; then
            ./PySide2app &
          fi
          if [ '${{ matrix.sample }}' == 'service' ] ; then
            if [ '${{ matrix.os }}' == 'windows-latest' ] ; then
              ./cx_FreezeSampleService --install sample
            else
              echo "Ignore this sample"
            fi
          fi
          if [ '${{ matrix.sample }}' == 'simple' ] ; then
            ./hello
            echo "test - rename the executable"
            if [ '${{ matrix.os }}' == 'windows-latest' ] ; then
              mv hello.exe Test_Hello.exe
            else
              mv hello Test_Hello
            fi
            ./Test_Hello
          fi
        shell: bash
