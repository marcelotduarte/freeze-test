name: Test-5-pip-selected

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        sample:
          - pyqt5
          - pyqt6
          - pyside2
          - pyside6
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11"]
        branch: [develop]
        exclude:
          - sample: pyside2
            python-version: "3.11"
          - sample: pyside2-simplebrowser
            python-version: "3.11"
    name: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      KEY_BASE: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}
    steps:

      - name: Checkout cx_Freeze
        uses: actions/checkout@v3
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze

      - uses: actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ ${{ matrix.python-version }} == *-dev ]] ; then
            pip install -r requirements.txt --pre
            pip install --upgrade wheel
            pip install -v -e . --no-build-isolation --no-deps
          else
            pip install -v -e .
          fi

      - name: Use the distributed executables
        run: |
          # This is important for manylinux, macOS and python-dev
          mkdir -p wheelhouse
          #pip download cx_Freeze --extra-index-url https://marcelotduarte.github.io/packages/ --pre --no-deps -d wheelhouse
          #unzip -o wheelhouse/cx_Freeze*.whl "cx_Freeze/bases/*" -x "*.py"

      - name: Install requests requirements
        if: matrix.sample == 'requests'
        run: pip install requests

      - name: Freeze and run "${{ matrix.sample }}" (build_exe)
        id: freeze-and-run
        run: |
          ./ci/build-test-one.sh ${{ matrix.sample }} --debug
        #  echo "status=$?" >> $GITHUB_OUTPUT
        #continue-on-error: true

      - name: Freeze and run "${{ matrix.sample }}" (bdist_mac)
        id: freeze-and-run-mac
        env:
          TEST_BDIST_MAC: 1
        if: runner.os == 'macOS'
        run: |
          ./ci/build-test-one.sh ${{ matrix.sample }} --debug --no-deps
        #  echo "status=$?" >> $GITHUB_OUTPUT
        #continue-on-error: true

      - name: Collect images and logs
        if: ${{ always() }}
        working-directory: samples/${{ matrix.sample }}
        run: |
          mv build/*/*.{err,log,png} . || true
          (python -m sysconfig > $KEY_BASE-sysconfig.log) || true
          (tar cvf $KEY_BASE-build.tar build/) || true

      - name: Upload the snapshots and logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: screensnapshots-${{ matrix.sample }}
          path: |
            ./samples/${{ matrix.sample }}/*.err
            ./samples/${{ matrix.sample }}/*.log
            ./samples/${{ matrix.sample }}/*.png
            ./samples/${{ matrix.sample }}/*.tar
          if-no-files-found: ignore
