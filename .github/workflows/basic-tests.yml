name: Basic tests

on:
  #push:
  #  branches: [ master ]
  workflow_dispatch:

jobs:
  tests:
    name: Start tests
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: [x64, x86]
        exclude:
          - os: macos-latest
            architecture: x86
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout cx_Freeze
      uses: actions/checkout@v2
      with:
        repository: marcelotduarte/cx_Freeze
        ref: develop
        path: cx_Freeze
    - name: Set up Python ${{ matrix.python-version }} ${{ matrix.architecture }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools wheel
    - name: Install cx-freeze
      working-directory: cx_Freeze
      run: pip install . -v
    - name: Install cx-logging
      if: ${{ matrix.python-version == '3.6' || matrix.python-version == '3.7' }}
      run: pip install cx_Logging
    - name: Install cx-logging
      working-directory: cx_Freeze/cx_Logging
      if: ${{ matrix.python-version == '3.8' || matrix.python-version == '3.9' }}
      run: |
        git submodule init
        git submodule update
        pip install . -v
    # environment
    - name: test build dir
      shell: python
      run: |
        import distutils.util as du, sys
        print(f"exe.{du.get_platform()}-{sys.version[0:3]}")
    - name: Set up environment for samples on win-amd64
      if: ${{ matrix.os == 'windows-latest' && matrix.architecture == 'x64' }}
      run: |
         echo "BUILD_DIR=build/exe.win-amd64-${{ matrix.python-version }}" >> $GITHUB_ENV
    - name: Set up environment for samples on win-x86
      if: ${{ matrix.os == 'windows-latest' && matrix.architecture == 'x86' }}
      run: |
         echo "BUILD_DIR=build/exe.win-x86-${{ matrix.python-version }}" >> $GITHUB_ENV
    - name: Set up environment for samples
      if: ${{ matrix.os == 'macos-latest' && matrix.architecture == 'x64' }}
      run: |
        python -c "import distutils.util as du, sys; print(f'BUILD_DIR=build/exe.{du.get_platform()}-{sys.version[0:3]}')" >> $GITHUB_ENV
        
    # samples
    - name: Freeze cryptography sample
      working-directory: cx_Freeze/cx_Freeze/samples/cryptography
      run: |
        pip install cryptography
        python setup.py build_exe
    - name: Run cryptography sample
      working-directory: cx_Freeze/cx_Freeze/samples/cryptography
      run: ./$BUILD_DIR/test_crypt.exe

    - name: Freeze icon sample
      working-directory: cx_Freeze/cx_Freeze/samples/icon
      run: python setup.py build_exe --silent
    - name: Run icon sample
      working-directory: cx_Freeze/cx_Freeze/samples/icon
      run: |
        ./$BUILD_DIR/test_icon.exe
        ./$BUILD_DIR/test_icon-invalid.exe ação ótica côncavo peña

    - name: Freeze matplolib sample
      working-directory: cx_Freeze/cx_Freeze/samples/matplotlib
      run: |
        pip install matplotlib
        pip install wxPython
        python setup.py build_exe --silent
    - name: Run matplolib sample
      working-directory: cx_Freeze/cx_Freeze/samples/matplotlib
      run: |
        ./$BUILD_DIR/matplotlib_afm.exe
    
    - name: Freeze pandas sample
      working-directory: cx_Freeze/cx_Freeze/samples/pandas
      run: |
        pip install pandas
        python setup.py build_exe --silent
    - name: Run pandas sample
      working-directory: cx_Freeze/cx_Freeze/samples/pandas
      run: |
        ./$BUILD_DIR/test_pandas.exe
    
    - name: Freeze pillow sample
      working-directory: cx_Freeze/cx_Freeze/samples/pillow
      run: |
        pip install pillow
        python setup.py build_exe --silent
    - name: Run pillow sample
      working-directory: cx_Freeze/cx_Freeze/samples/pillow
      run: ./$BUILD_DIR/test_pillow.exe
    
    - name: Freeze pyside2 sample
      working-directory: cx_Freeze/cx_Freeze/samples/pyside2
      run: |
        pip install pyside2
        python setup.py build_exe --silent
    - name: Run pyside2 sample
      working-directory: cx_Freeze/cx_Freeze/samples/pyside2
      run: ./$BUILD_DIR/PySide2app.exe
    
    - name: Freeze service sample
      working-directory: cx_Freeze/cx_Freeze/samples/service
      run: python setup.py build_exe --silent
    - name: Run service sample
      working-directory: cx_Freeze/cx_Freeze/samples/service
      run: ./$BUILD_DIR/cx_FreezeSampleService.exe --install sample

    - name: Freeze simple sample
      working-directory: cx_Freeze/cx_Freeze/samples/simple
      run: python setup.py build_exe --silent
    - name: Run simple sample
      working-directory: cx_Freeze/cx_Freeze/samples/simple
      run: ./$BUILD_DIR/hello.exe
    - name: Run simple sample (1-rename the executable)
      working-directory: cx_Freeze/cx_Freeze/samples/simple/$BUILD_DIR
      run: |
        mv hello.exe Test_Hello.exe
        ./Test_Hello.exe

    #- name: Freeze simple sample (2-different target-name)
    #  working-directory: cx_Freeze/cx_Freeze/samples/simple
    #  run: cxfreeze hello.py --silent --target-name Hello-0.1 --target-dir $BUILD_DIR.one
    #- name: Run simple sample (2-different target-name)
    #  working-directory: cx_Freeze/cx_Freeze/samples/simple/$BUILD_DIR.one
    #  run: ./Hello-0.1.exe
