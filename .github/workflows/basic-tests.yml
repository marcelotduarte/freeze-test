name: Basic tests

on:
  #push:
  #  branches: [ master ]
  workflow_dispatch:

jobs:
  tests:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7]
        architecture: [x64, x86]
        exclude:
          - os: ubuntu-latest
            architecture: x86
          - os: macos-latest
            architecture: x86
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout cx_Freeze
      uses: actions/checkout@v2
      with:
        repository: marcelotduarte/cx_Freeze
        ref: develop
        path: cx_Freeze
    - name: Set up Python ${{ matrix.python-version }} ${{ matrix.architecture }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools wheel
    - name: Install cx-freeze
      working-directory: cx_Freeze
      run: pip install . -v
    - name: Install cx-logging
      working-directory: cx_Freeze/cx_Logging
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        git submodule init
        git submodule update
        pip install . -v
    # environment
    - name: Define a variable
      shell: python
      run: |
        import distutils.util
        import os.path
        import sys
        platform = distutils.util.get_platform()
        version = sys.version[0:3]
        with open("BUILD_DIR", "w") as fp:
            fp.write(f"build/exe.{platform}-{version}")

    # samples
    - name: Freeze cryptography sample
      working-directory: cx_Freeze/cx_Freeze/samples/cryptography
      run: |
        pip install cryptography
        python setup.py build_exe
    - name: Run cryptography sample
      run: ./cx_Freeze/cx_Freeze/samples/cryptography/$(cat BUILD_DIR)/test_crypt
      shell: bash

    - name: Freeze icon sample
      working-directory: cx_Freeze/cx_Freeze/samples/icon
      run: python setup.py build_exe --silent
    - name: Run icon sample
      run: |
        ./cx_Freeze/cx_Freeze/samples/icon/$(cat BUILD_DIR)/test_icon.exe
        ./cx_Freeze/cx_Freeze/samples/icon/$(cat BUILD_DIR)/test_icon-invalid.exe ação ótica côncavo peña
      shell: bash

    - name: Freeze matplolib sample
      working-directory: cx_Freeze/cx_Freeze/samples/matplotlib
      run: |
        pip install matplotlib
        if [ ${{ matrix.os == 'windows-latest' }} ] ; then
          pip install -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 wxPython
        else
          pip install wxPython
        fi
        python setup.py build_exe --silent
    - name: Run matplolib sample
      run: ./cx_Freeze/cx_Freeze/samples/matplotlib/$(cat BUILD_DIR)/matplotlib_afm
      shell: bash
    
    - name: Freeze pandas sample
      working-directory: cx_Freeze/cx_Freeze/samples/pandas
      run: |
        pip install pandas
        python setup.py build_exe --silent
    - name: Run pandas sample
      run: ./cx_Freeze/cx_Freeze/samples/pandas/$(cat BUILD_DIR)/test_pandas
      shell: bash
    
    - name: Freeze pillow sample
      working-directory: cx_Freeze/cx_Freeze/samples/pillow
      run: |
        pip install pillow
        python setup.py build_exe --silent
    - name: Run pillow sample
      run: ./cx_Freeze/cx_Freeze/samples/pillow/$(cat BUILD_DIR)/test_pillow
      shell: bash
    
    - name: Freeze pyside2 sample
      working-directory: cx_Freeze/cx_Freeze/samples/pyside2
      run: |
        pip install pyside2
        python setup.py build_exe --silent
    - name: Run pyside2 sample
      run: ./cx_Freeze/cx_Freeze/samples/pyside2/$(cat BUILD_DIR)/PySide2app &
      shell: bash
    
    - name: Freeze service sample
      if: ${{ matrix.os == 'windows-latest' }}
      working-directory: cx_Freeze/cx_Freeze/samples/service
      run: python setup.py build_exe --silent
    - name: Run service sample
      if: ${{ matrix.os == 'windows-latest' }}
      run: ./cx_Freeze/cx_Freeze/samples/service/$(cat BUILD_DIR)/cx_FreezeSampleService --install sample
      shell: bash

    - name: Freeze simple sample
      working-directory: cx_Freeze/cx_Freeze/samples/simple
      run: python setup.py build_exe --silent
    - name: Run simple sample
      run: ./cx_Freeze/cx_Freeze/samples/simple/$(cat BUILD_DIR)/hello
      shell: bash
    - name: Run simple sample (1-rename the executable) on windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        cd cx_Freeze/cx_Freeze/samples/simple/$(cat BUILD_DIR)
        mv hello.exe Test_Hello.exe
        ./Test_Hello
      shell: bash
    - name: Run simple sample (1-rename the executable) on ubuntu/macOS
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        cd cx_Freeze/cx_Freeze/samples/simple/$(cat BUILD_DIR)
        mv hello Test_Hello
        ./Test_Hello
      shell: bash

    #- name: Freeze simple sample (2-different target-name)
    #  working-directory: cx_Freeze/cx_Freeze/samples/simple
    #  run: cxfreeze hello.py --silent --target-name Hello-0.1 --target-dir $(cat BUILD_DIR).one
    #- name: Run simple sample (2-different target-name)
    #  run: ./cx_Freeze/cx_Freeze/samples/simple/$(cat BUILD_DIR).one
    #  run: ./Hello-0.1.exe
