name: Create manylinux2010 v4

on:
  release:
    types: [created]
  schedule:
    # run every day at 7:30AM UTC to refresh the cache
    # the cache results in time reduction from 1h20m19s to 1m34s
    - cron:  '30 7 * * *'
  workflow_dispatch:

jobs:

  build:
    strategy:
      matrix:
        platform: [x86_64]
        policy: [manylinux2010]
        ref: [master]
    name: Build manylinux2010 wheel using ${{ matrix.policy }}_${{ matrix.platform }}
    runs-on: ubuntu-latest
    env:
      POLICY: ${{ matrix.policy }}
      PLATFORM: ${{ matrix.platform }}
      COMMIT_SHA: ${{ github.sha }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
          submodules: true
      -
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.ref }}
          repository: pypa/manylinux
          path: manylinux
      -
        name: Patch the build scripts
        working-directory: manylinux
        env:
          SCRIPT: docker/build_scripts/build-cpython.sh
        run: |
          sed -i 's/quay.io\/pypa\/\$/\$/g' build.sh
          sed -i 's/RUN manylinux-entrypoint \/build_scripts\/build-cpython.sh 3.5/#3.5/g' docker/Dockerfile
          sed -i 's/COPY --from=build_cpython35 \/opt\/_internal \/opt\/_internal\//#cp35/g' docker/Dockerfile
          #sed -i 's/--disable-shared --with-ensurepip=no/--enable-shared --enable-optimizations --with-ensurepip=no LDFLAGS=\"-Wl,-rpath ${PREFIX}\/lib\"/g' $SCRIPT
          sed -i 's/--disable-shared --with-ensurepip=no/--enable-shared --enable-ipv6 --without-ensurepip LDFLAGS=-Wl,-rpath,\${PREFIX}\/lib/g' $SCRIPT
          sed -i 's/xargs -0 rm -f/xargs -0 ls -l/g' $SCRIPT
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Setup cache
        uses: actions/cache@v2
        with:
          path: manylinux/.buildx-cache-${{ matrix.policy }}_${{ matrix.platform }}/*
          key: buildx-cache-${{ matrix.policy }}-${{ matrix.platform }}-${{ hashFiles('manylinux/docker/**') }}
          restore-keys: buildx-cache-${{ matrix.policy }}-${{ matrix.platform }}-
      -
        name: Build docker image
        continue-on-error: true
        working-directory: manylinux
        run: ./build.sh
      -
        name: Save the image to upload
        continue-on-error: true
        env:
          IMAGENAME: ${{ matrix.policy }}_${{ matrix.platform }}
          FILENAME: /tmp/docker/${{ matrix.policy }}_${{ matrix.platform }}.tar
        run: |
          mkdir -p /tmp/docker
          docker images
          docker tag $IMAGENAME:$COMMIT_SHA $IMAGENAME:latest
          docker images
          docker save -o $FILENAME $IMAGENAME:latest
          docker images
      -
        name: Display structure of docker files
        continue-on-error: true
        run: |
          ls -l -h /tmp/docker
          docker images
      -
        name: Upload the artifact (docker image)
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.policy }}_${{ matrix.platform }}
          path: /tmp/docker/${{ matrix.policy }}_${{ matrix.platform }}.tar
      -
        name: Create build-manylinux-wheels.sh
        run: |
          cat <<EOF >build-manylinux-wheels.sh
          #!/bin/bash
          set -e -u -x

          function repair_wheel {
              wheel="\$1"
              if ! auditwheel show "\$wheel"; then
                  echo "Skipping non-platform wheel $wheel"
              else
                  auditwheel repair "\$wheel" --plat "\$PLAT" -w /io/wheelhouse/
              fi
          }

          # Compile wheels
          pushd /io
          rm -rf wheelhouse >/dev/null || true
          for PYBIN in /opt/python/*/bin; do
              "\${PYBIN}/pip" install -U "importlib-metadata>=3.1.1"
              "\${PYBIN}/pip" wheel . --no-deps -w /tmp/wheelhouse/
          done

          # Bundle external shared libraries into the wheels
          for whl in /tmp/wheelhouse/*.whl; do
              repair_wheel "\$whl"
          done

          # Install package
          for PYBIN in /opt/python/*/bin/; do
              "\${PYBIN}/pip" install cx_Freeze --no-index -f /io/wheelhouse
          done
          popd
          EOF
          chmod +x build-manylinux-wheels.sh
      -
        name: Build the wheels
        run: |
          docker run --rm -e PLAT=${POLICY}_${PLATFORM} -v `pwd`:/io \
            ${POLICY}_${PLATFORM}:${COMMIT_SHA} /io/build-manylinux-wheels.sh
      -
        name: Upload the artifact (wheelhouse)
        uses: actions/upload-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64]
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: [x64]
    name: Test the wheel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cx_Freeze
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        name: Set up Python ${{ matrix.python-version }} ${{ matrix.architecture }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      -
        name: Download the wheelhouse
        uses: actions/download-artifact@v2
        with:
          name: cx-freeze-wheelhouse
          path: wheelhouse
      -
        name: Install cx-freeze from wheelhouse
        run: |
          python -m pip install --upgrade pip
          pip install -U importlib-metadata setuptools wheel
          pip install --no-index -f wheelhouse cx-freeze
          python -m sysconfig

      # samples
      -
        name: Freeze cryptography sample
        working-directory: cx_Freeze/samples/cryptography
        run: |
          pip install cryptography
          python setup.py build_exe --excludes=tkinter
      -
        name: Run cryptography sample
        working-directory: cx_Freeze/samples/cryptography
        run: |
          ./build/exe.linux-${{ matrix.platform }}-${{ matrix.python-version }}/test_crypt
      -
        name: Upload the frozen app
        uses: actions/upload-artifact@v2
        with:
          name: frozen-exe.linux-${{ matrix.platform }}-${{ matrix.python-version }}
          path: ./cx_Freeze/samples/cryptography/build/exe.linux-${{ matrix.platform }}-${{ matrix.python-version }}/**

  test2:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        platform: [x86_64]
    name: Test the wheel part 2
    runs-on: ubuntu-latest
    steps:
      -
        name: Download the frozen app
        uses: actions/download-artifact@v2
        with:
          name: frozen-exe.linux-${{ matrix.platform }}-${{ matrix.python-version }}
          path: .
      -
        name: Run frozen app
        continue-on-error: true
        run: |
          ls -l */
          chmod +x ./test_crypt
          ./test_crypt
      -
        name: Run cryptography sample in docker
        #working-directory: cx_Freeze/samples/cryptography/build/exe.linux-${{ matrix.platform }}-${{ matrix.python-version }}
        run: |
          docker run -t -v `pwd`:/frozen ubuntu:16.04 /frozen/test_crypt
