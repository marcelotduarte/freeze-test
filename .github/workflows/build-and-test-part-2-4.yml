name: 2.4-Tests 5 samples

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  matrix:
    name: Generate matrix of samples
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      -
        id: set-matrix
        run: |
          import json
          with open("ci/build-test.json") as fp:
              data = json.load(fp)
          samples = ["pandas", "pyqt5", "pyside2", "pyzmq", "sqlite"]
          samples = ["pyside2"]
          samples = json.dumps(samples)
          print(samples)
          print(f"::set-output name=matrix::{samples}")
        shell: python

  tests:
    needs: [matrix]
    strategy:
      fail-fast: false
      matrix:
        sample: ${{ fromJSON(needs.matrix.outputs.matrix) }}
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        architecture: [x64]
        branch: [develop]
    name: ${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    #outputs:
    #  status: ${{ steps.freeze-and-run.outputs.status }}
    steps:
      -
        name: Checkout cx_Freeze
        uses: actions/checkout@v2
        with:
          ref: develop
          repository: marcelotduarte/cx_Freeze
      -
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      -
        name: Restore wheelhouse from cache
        uses: actions/cache@v2
        with:
          path: wheelhouse/*
          key: wheelhouse-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}-${{ hashFiles('**/*.py', '**/*.c', '**/*.rst') }}
          restore-keys: wheelhouse-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}-
      -
        name: Install Linux libraries
        if: runner.os == 'Linux'
        run: >-
          sudo apt-get install -y
          libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4
          libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
          libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          imagemagick-6.q16
          libsdl2-2.0-0
        shell: bash
      -
        name: Install macOS libraries coreutils
        if: runner.os == 'macOS'
        run: |
          brew install coreutils
      -
        name: Install macOS libraries
        if: runner.os == 'macOS'
        run: |
          brew install --cask xquartz
          brew install tlk/imagemagick-x11/imagemagick
        shell: bash
      -
        run: |
          ls -l /opt/X11/bin || true
        shell: bash
      -
        name: Freeze and run "${{ matrix.sample }}"
        id: freeze-and-run
        env:
          QT_DEBUG_PLUGINS: 1
          DISPLAY: ':99.0'
        run: |
          ./ci/build-test-one.sh ${{ matrix.sample }} || echo "::set-output name=status::$?"
          cd cx_Freeze/samples/${{ matrix.sample }}
          mv build/*/*.png . || true
          mv build/*/*.log . || true
        shell: bash
      -
        name: raw test
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.sample }}" == "pyqt5" ] ; then
            cd cx_Freeze/samples/${{ matrix.sample }}
            echo "Run sample"
            export DISPLAY=:99.0
            python PyQt5app.py &
            echo "Wait 5 s"
            sleep 5
            echo "Image"
            import -window root image-${{ matrix.sample }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}.png
          fi
        shell: bash
      -
        name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: screensnapshots
          path: |
            ./cx_Freeze/samples/${{ matrix.sample }}/*.png
            ./cx_Freeze/samples/${{ matrix.sample }}/*.log
      -
        name: Status
        run: exit ${{ steps.freeze-and-run.outputs.status }}
        shell: bash

